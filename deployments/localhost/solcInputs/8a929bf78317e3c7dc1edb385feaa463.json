{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    //constant and immutable are gas savers\n    //constant used if used insiide function and immutable if inside constructor\n    //819952gas\n    //800392 when constant used\n    //800392 when both constant and immutable used\n\n    uint256 public constant minUSD = 50 * 1e18;\n    //use 50/current usd price for 1 eth ;then to WEI\n\n    address[] public funders;\n    mapping(address => uint256) public addrToAmt;\n\n    address public immutable owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddr) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddr);\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) > minUSD,\n            \"Didnot send enough\"\n        );\n        //msg.value is send as 1st parameter to getConversionRate()\n        //if 2nd param present send inside bracket\n\n        funders.push(msg.sender);\n        addrToAmt[msg.sender] = msg.value;\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender==owner,\"Sender is not owner\");\n        if (msg.sender != owner) {\n            revert NotOwner();\n        }\n        _; //rest of the code\n    }\n\n    function withdraw() public onlyOwner {\n        //to allow only owner to withdraw fund\n        // require(msg.sender==owner,\"Sender is not owner\");\n\n        for (uint256 i = 0; i < funders.length; i++) {\n            address addr = funders[i];\n            addrToAmt[addr] = 0;\n        }\n\n        //to reset the funders array\n        funders = new address[](0); //represents 0 element\n\n        //3 ways to transfer eth\n\n        //     //transfer;address ie msg.sender to payable address;if failed reverts\n        //     payable (msg.sender).transfer(address(this).balance);\n        //    }\n\n        //    //send; if fails returns bool value\n        //    bool success = payable (msg.sender).send(address(this).balance);\n        //    require(success,\"Send failed\");\n\n        //call\n        (bool callSuccess, bytes memory dataReturned) = payable(msg.sender)\n            .call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Send failed\");\n    }\n\n    //what happens if someone send eth without using fund function\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n\n        return uint256(answer * 1e10); //since asnwer is in int256\n        //8 decimals * 1e10=18 decimals\n    }\n\n    // function getVersion() internal view returns (uint256) {\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\n    //     );\n    //     return priceFeed.version();\n    // }\n\n    function getConversionRate(\n        uint256 ethamount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmtinUsd = (ethPrice * ethamount) / 1e18;\n        return ethAmtinUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}