{
  "address": "0x34D71d2e3D8c48226836313A4cc07225319EDdaC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddrToAmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd04a6db6b3f83a7b6b00d1401bde1567e1d98aaf3597e8bc5f5713b0294fb417",
  "receipt": {
    "to": null,
    "from": "0xfDA443B59c5d2CA614369CDf3F701f9da8F945ca",
    "contractAddress": "0x34D71d2e3D8c48226836313A4cc07225319EDdaC",
    "transactionIndex": 55,
    "gasUsed": "1014459",
    "logsBloom": "0x
    "blockHash": "0x27e072ed0edaa594c36a9da2efe50fd048d67068956fc77199541552e6ccd688",
    "transactionHash": "0xd04a6db6b3f83a7b6b00d1401bde1567e1d98aaf3597e8bc5f5713b0294fb417",
    "logs": [],
    "blockNumber": 4648314,
    "cumulativeGasUsed": "10050538",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "6f6ffdb9d4f342dfcb5b7796b7f4543c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddrToAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    //constant and immutable are gas savers\\n    //constant used if used insiide function and immutable if inside constructor\\n    //819952gas\\n    //800392 when constant used\\n    //800392 when both constant and immutable used\\n\\n    uint256 public constant MINUSD = 50 * 1e18;\\n    //use 50/current usd price for 1 eth ;then to WEI\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addrToAmt;\\n\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address s_priceFeedAddr) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddr);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) > MINUSD,\\n            \\\"Didnot send enough\\\"\\n        );\\n        //msg.value is send as 1st parameter to getConversionRate()\\n        //if 2nd param present send inside bracket\\n\\n        s_funders.push(msg.sender);\\n        s_addrToAmt[msg.sender] = msg.value;\\n    }\\n\\n    modifier onlyi_owner() {\\n        // require(msg.sender==i_owner,\\\"Sender is not i_owner\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _; //rest of the code\\n    }\\n\\n    function withdraw() public onlyi_owner {\\n        //to allow only i_owner to withdraw fund\\n        // require(msg.sender==i_owner,\\\"Sender is not owner\\\");\\n\\n        for (uint256 i = 0; i < s_funders.length; i++) {\\n            address addr = s_funders[i];\\n            s_addrToAmt[addr] = 0;\\n        }\\n\\n        //to reset the s_funders array\\n        s_funders = new address[](0); //represents 0 element\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Send failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyi_owner {\\n        //reading and storing to/from storage cost way more gas\\n        address[] memory funders = s_funders; //memory is way cheaper than storage\\n\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address addr = funders[i];\\n            //mappings cant be in memory\\n            s_addrToAmt[addr] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddrToAmt(address funder) public view returns (uint256) {\\n        return s_addrToAmt[funder];\\n    }\\n\\n    //what happens if someone send eth without using fund function\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0xfb5a42c75258dcaaed38417e5681368e1884e0e296b4f285bbad449822157059\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n\\n        return uint256(answer * 1e10); //since asnwer is in int256\\n        //8 decimals * 1e10=18 decimals\\n    }\\n\\n    // function getVersion() internal view returns (uint256) {\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethamount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmtinUsd = (ethPrice * ethamount) / 1e18;\\n        return ethAmtinUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x46acd7b20aa03b6e254c5771a674b7e0734f6a6aa006860a7f22b3dc2497ac19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200128138038062001281833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6110fb62000186600039600081816102e801528181610580015281816105d001526107c601526110fb6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80633ccfd60b146100985780634dc93616146100af57806360f65c6e146100da578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100ad6102e6565b005b3480156100bb57600080fd5b506100c4610526565b6040516100d19190610a3f565b60405180910390f35b3480156100e657600080fd5b5061010160048036038101906100fc9190610abd565b610533565b60405161010e9190610a3f565b60405180910390f35b34801561012357600080fd5b5061012c61057c565b6040516101399190610af9565b60405180910390f35b34801561014e57600080fd5b506101576105a4565b6040516101649190610b73565b60405180910390f35b6101756101be565b005b61017f6105ce565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bba565b61085c565b6040516101b59190610af9565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a390919063ffffffff16565b1161023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023490610c44565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104165760008082815481106103905761038f610c64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040e90610cc2565b91505061036e565b50600067ffffffffffffffff81111561043257610431610d0b565b5b6040519080825280602002602001820160405280156104605781602001602082028036833780820191505090505b506000908051906020019061047692919061097f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049d90610d6b565b60006040518083038185875af1925050503d80600081146104da576040519150601f19603f3d011682016040523d82523d6000602084013e6104df565b606091505b5050905080610523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051a90610dcc565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610653576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068c575b5050505050905060005b81518110156107615760008282815181106106fe576106fd610c64565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075990610cc2565b9150506106e0565b50600067ffffffffffffffff81111561077d5761077c610d0b565b5b6040519080825280602002602001820160405280156107ab5781602001602082028036833780820191505090505b50600090805190602001906107c192919061097f565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080890610d6b565b60006040518083038185875af1925050503d8060008114610845576040519150601f19603f3d011682016040523d82523d6000602084013e61084a565b606091505b505090508061085857600080fd5b5050565b600080828154811061087157610870610c64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108af836108df565b90506000670de0b6b3a764000085836108c89190610dec565b6108d29190610e75565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092857600080fd5b505afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190610f33565b5050509150506402540be400816109779190610fae565b915050919050565b8280548282559060005260206000209081019282156109f8579160200282015b828111156109f75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099f565b5b509050610a059190610a09565b5090565b5b80821115610a22576000816000905550600101610a0a565b5090565b6000819050919050565b610a3981610a26565b82525050565b6000602082019050610a546000830184610a30565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8a82610a5f565b9050919050565b610a9a81610a7f565b8114610aa557600080fd5b50565b600081359050610ab781610a91565b92915050565b600060208284031215610ad357610ad2610a5a565b5b6000610ae184828501610aa8565b91505092915050565b610af381610a7f565b82525050565b6000602082019050610b0e6000830184610aea565b92915050565b6000819050919050565b6000610b39610b34610b2f84610a5f565b610b14565b610a5f565b9050919050565b6000610b4b82610b1e565b9050919050565b6000610b5d82610b40565b9050919050565b610b6d81610b52565b82525050565b6000602082019050610b886000830184610b64565b92915050565b610b9781610a26565b8114610ba257600080fd5b50565b600081359050610bb481610b8e565b92915050565b600060208284031215610bd057610bcf610a5a565b5b6000610bde84828501610ba5565b91505092915050565b600082825260208201905092915050565b7f4469646e6f742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c2e601283610be7565b9150610c3982610bf8565b602082019050919050565b60006020820190508181036000830152610c5d81610c21565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ccd82610a26565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d0057610cff610c93565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d55600083610d3a565b9150610d6082610d45565b600082019050919050565b6000610d7682610d48565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610db6600b83610be7565b9150610dc182610d80565b602082019050919050565b60006020820190508181036000830152610de581610da9565b9050919050565b6000610df782610a26565b9150610e0283610a26565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3b57610e3a610c93565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8082610a26565b9150610e8b83610a26565b925082610e9b57610e9a610e46565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ec581610ea6565b8114610ed057600080fd5b50565b600081519050610ee281610ebc565b92915050565b6000819050919050565b610efb81610ee8565b8114610f0657600080fd5b50565b600081519050610f1881610ef2565b92915050565b600081519050610f2d81610b8e565b92915050565b600080600080600060a08688031215610f4f57610f4e610a5a565b5b6000610f5d88828901610ed3565b9550506020610f6e88828901610f09565b9450506040610f7f88828901610f1e565b9350506060610f9088828901610f1e565b9250506080610fa188828901610ed3565b9150509295509295909350565b6000610fb982610ee8565b9150610fc483610ee8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561100357611002610c93565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110405761103f610c93565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561107d5761107c610c93565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ba576110b9610c93565b5b82820290509291505056fea264697066735822122054445ada97ab64c04eea2e4c0d702459d09c4fa55d145d5bfb432b7e9779dcd564736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80633ccfd60b146100985780634dc93616146100af57806360f65c6e146100da578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100ad6102e6565b005b3480156100bb57600080fd5b506100c4610526565b6040516100d19190610a3f565b60405180910390f35b3480156100e657600080fd5b5061010160048036038101906100fc9190610abd565b610533565b60405161010e9190610a3f565b60405180910390f35b34801561012357600080fd5b5061012c61057c565b6040516101399190610af9565b60405180910390f35b34801561014e57600080fd5b506101576105a4565b6040516101649190610b73565b60405180910390f35b6101756101be565b005b61017f6105ce565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bba565b61085c565b6040516101b59190610af9565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a390919063ffffffff16565b1161023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023490610c44565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104165760008082815481106103905761038f610c64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040e90610cc2565b91505061036e565b50600067ffffffffffffffff81111561043257610431610d0b565b5b6040519080825280602002602001820160405280156104605781602001602082028036833780820191505090505b506000908051906020019061047692919061097f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049d90610d6b565b60006040518083038185875af1925050503d80600081146104da576040519150601f19603f3d011682016040523d82523d6000602084013e6104df565b606091505b5050905080610523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051a90610dcc565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610653576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068c575b5050505050905060005b81518110156107615760008282815181106106fe576106fd610c64565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075990610cc2565b9150506106e0565b50600067ffffffffffffffff81111561077d5761077c610d0b565b5b6040519080825280602002602001820160405280156107ab5781602001602082028036833780820191505090505b50600090805190602001906107c192919061097f565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080890610d6b565b60006040518083038185875af1925050503d8060008114610845576040519150601f19603f3d011682016040523d82523d6000602084013e61084a565b606091505b505090508061085857600080fd5b5050565b600080828154811061087157610870610c64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108af836108df565b90506000670de0b6b3a764000085836108c89190610dec565b6108d29190610e75565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092857600080fd5b505afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190610f33565b5050509150506402540be400816109779190610fae565b915050919050565b8280548282559060005260206000209081019282156109f8579160200282015b828111156109f75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099f565b5b509050610a059190610a09565b5090565b5b80821115610a22576000816000905550600101610a0a565b5090565b6000819050919050565b610a3981610a26565b82525050565b6000602082019050610a546000830184610a30565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8a82610a5f565b9050919050565b610a9a81610a7f565b8114610aa557600080fd5b50565b600081359050610ab781610a91565b92915050565b600060208284031215610ad357610ad2610a5a565b5b6000610ae184828501610aa8565b91505092915050565b610af381610a7f565b82525050565b6000602082019050610b0e6000830184610aea565b92915050565b6000819050919050565b6000610b39610b34610b2f84610a5f565b610b14565b610a5f565b9050919050565b6000610b4b82610b1e565b9050919050565b6000610b5d82610b40565b9050919050565b610b6d81610b52565b82525050565b6000602082019050610b886000830184610b64565b92915050565b610b9781610a26565b8114610ba257600080fd5b50565b600081359050610bb481610b8e565b92915050565b600060208284031215610bd057610bcf610a5a565b5b6000610bde84828501610ba5565b91505092915050565b600082825260208201905092915050565b7f4469646e6f742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c2e601283610be7565b9150610c3982610bf8565b602082019050919050565b60006020820190508181036000830152610c5d81610c21565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ccd82610a26565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d0057610cff610c93565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d55600083610d3a565b9150610d6082610d45565b600082019050919050565b6000610d7682610d48565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610db6600b83610be7565b9150610dc182610d80565b602082019050919050565b60006020820190508181036000830152610de581610da9565b9050919050565b6000610df782610a26565b9150610e0283610a26565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3b57610e3a610c93565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8082610a26565b9150610e8b83610a26565b925082610e9b57610e9a610e46565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ec581610ea6565b8114610ed057600080fd5b50565b600081519050610ee281610ebc565b92915050565b6000819050919050565b610efb81610ee8565b8114610f0657600080fd5b50565b600081519050610f1881610ef2565b92915050565b600081519050610f2d81610b8e565b92915050565b600080600080600060a08688031215610f4f57610f4e610a5a565b5b6000610f5d88828901610ed3565b9550506020610f6e88828901610f09565b9450506040610f7f88828901610f1e565b9350506060610f9088828901610f1e565b9250506080610fa188828901610ed3565b9150509295509295909350565b6000610fb982610ee8565b9150610fc483610ee8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561100357611002610c93565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110405761103f610c93565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561107d5761107c610c93565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ba576110b9610c93565b5b82820290509291505056fea264697066735822122054445ada97ab64c04eea2e4c0d702459d09c4fa55d145d5bfb432b7e9779dcd564736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addrToAmt",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}