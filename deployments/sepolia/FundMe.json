{
  "address": "0x4F38A7FDeA877Ca06b9462F8B77260d152781E97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addrToAmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x818efcdf96fc259c6ce79b60d5fd96fb6ae49c05f6831f1a3be4c94a2055c452",
  "receipt": {
    "to": null,
    "from": "0xfDA443B59c5d2CA614369CDf3F701f9da8F945ca",
    "contractAddress": "0x4F38A7FDeA877Ca06b9462F8B77260d152781E97",
    "transactionIndex": 15,
    "gasUsed": "856009",
    "logsBloom": "0x
    "blockHash": "0x89aded1a75ef2fe657176b85a4b81640756abf469f87dc0024657e0be5b73e86",
    "transactionHash": "0x818efcdf96fc259c6ce79b60d5fd96fb6ae49c05f6831f1a3be4c94a2055c452",
    "logs": [],
    "blockNumber": 4640857,
    "cumulativeGasUsed": "10012871",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "8a929bf78317e3c7dc1edb385feaa463",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrToAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    //constant and immutable are gas savers\\n    //constant used if used insiide function and immutable if inside constructor\\n    //819952gas\\n    //800392 when constant used\\n    //800392 when both constant and immutable used\\n\\n    uint256 public constant minUSD = 50 * 1e18;\\n    //use 50/current usd price for 1 eth ;then to WEI\\n\\n    address[] public funders;\\n    mapping(address => uint256) public addrToAmt;\\n\\n    address public immutable owner;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddr) {\\n        owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddr);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) > minUSD,\\n            \\\"Didnot send enough\\\"\\n        );\\n        //msg.value is send as 1st parameter to getConversionRate()\\n        //if 2nd param present send inside bracket\\n\\n        funders.push(msg.sender);\\n        addrToAmt[msg.sender] = msg.value;\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender==owner,\\\"Sender is not owner\\\");\\n        if (msg.sender != owner) {\\n            revert NotOwner();\\n        }\\n        _; //rest of the code\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        //to allow only owner to withdraw fund\\n        // require(msg.sender==owner,\\\"Sender is not owner\\\");\\n\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address addr = funders[i];\\n            addrToAmt[addr] = 0;\\n        }\\n\\n        //to reset the funders array\\n        funders = new address[](0); //represents 0 element\\n\\n        //3 ways to transfer eth\\n\\n        //     //transfer;address ie msg.sender to payable address;if failed reverts\\n        //     payable (msg.sender).transfer(address(this).balance);\\n        //    }\\n\\n        //    //send; if fails returns bool value\\n        //    bool success = payable (msg.sender).send(address(this).balance);\\n        //    require(success,\\\"Send failed\\\");\\n\\n        //call\\n        (bool callSuccess, bytes memory dataReturned) = payable(msg.sender)\\n            .call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Send failed\\\");\\n    }\\n\\n    //what happens if someone send eth without using fund function\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0xa2c1f9fb9162eedd1cdbb3198e8148e9460308d575bfbd9fca9edf0e7ea31f35\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n\\n        return uint256(answer * 1e10); //since asnwer is in int256\\n        //8 decimals * 1e10=18 decimals\\n    }\\n\\n    // function getVersion() internal view returns (uint256) {\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethamount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmtinUsd = (ethPrice * ethamount) / 1e18;\\n        return ethAmtinUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x46acd7b20aa03b6e254c5771a674b7e0734f6a6aa006860a7f22b3dc2497ac19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f7f380380610f7f83398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e1a610165600039600081816102d3015261053c0152610e1a6000f3fe6080604052600436106100745760003560e01c8063a435605d1161004e578063a435605d146100fa578063b60d428814610137578063dc0d3dff14610141578063dc992aa01461017e57610083565b80633ccfd60b1461008d578063741bef1a146100a45780638da5cb5b146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b005b3480156100b057600080fd5b506100b9610514565b6040516100c691906107c4565b60405180910390f35b3480156100db57600080fd5b506100e461053a565b6040516100f19190610800565b60405180910390f35b34801561010657600080fd5b50610121600480360381019061011c919061084c565b61055e565b60405161012e9190610892565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610168600480360381019061016391906108d9565b610576565b6040516101759190610800565b60405180910390f35b34801561018a57600080fd5b506101936105b5565b6040516101a09190610892565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c290919063ffffffff16565b11610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610963565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610356576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040157600080828154811061037b5761037a610983565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f9906109e1565b915050610359565b50600067ffffffffffffffff81111561041d5761041c610a2a565b5b60405190808252806020026020018201604052801561044b5781602001602082028036833780820191505090505b506000908051906020019061046192919061069e565b506000803373ffffffffffffffffffffffffffffffffffffffff164760405161048990610a8a565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b509150915081610510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050790610aeb565b60405180910390fd5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b6000818154811061058657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6000806105ce836105fe565b90506000670de0b6b3a764000085836105e79190610b0b565b6105f19190610b94565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064757600080fd5b505afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190610c52565b5050509150506402540be400816106969190610ccd565b915050919050565b828054828255906000526020600020908101928215610717579160200282015b828111156107165782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106be565b5b5090506107249190610728565b5090565b5b80821115610741576000816000905550600101610729565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061078a61078561078084610745565b610765565b610745565b9050919050565b600061079c8261076f565b9050919050565b60006107ae82610791565b9050919050565b6107be816107a3565b82525050565b60006020820190506107d960008301846107b5565b92915050565b60006107ea82610745565b9050919050565b6107fa816107df565b82525050565b600060208201905061081560008301846107f1565b92915050565b600080fd5b610829816107df565b811461083457600080fd5b50565b60008135905061084681610820565b92915050565b6000602082840312156108625761086161081b565b5b600061087084828501610837565b91505092915050565b6000819050919050565b61088c81610879565b82525050565b60006020820190506108a76000830184610883565b92915050565b6108b681610879565b81146108c157600080fd5b50565b6000813590506108d3816108ad565b92915050565b6000602082840312156108ef576108ee61081b565b5b60006108fd848285016108c4565b91505092915050565b600082825260208201905092915050565b7f4469646e6f742073656e6420656e6f7567680000000000000000000000000000600082015250565b600061094d601283610906565b915061095882610917565b602082019050919050565b6000602082019050818103600083015261097c81610940565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109ec82610879565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1f57610a1e6109b2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a74600083610a59565b9150610a7f82610a64565b600082019050919050565b6000610a9582610a67565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ad5600b83610906565b9150610ae082610a9f565b602082019050919050565b60006020820190508181036000830152610b0481610ac8565b9050919050565b6000610b1682610879565b9150610b2183610879565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5a57610b596109b2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b9f82610879565b9150610baa83610879565b925082610bba57610bb9610b65565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610be481610bc5565b8114610bef57600080fd5b50565b600081519050610c0181610bdb565b92915050565b6000819050919050565b610c1a81610c07565b8114610c2557600080fd5b50565b600081519050610c3781610c11565b92915050565b600081519050610c4c816108ad565b92915050565b600080600080600060a08688031215610c6e57610c6d61081b565b5b6000610c7c88828901610bf2565b9550506020610c8d88828901610c28565b9450506040610c9e88828901610c3d565b9350506060610caf88828901610c3d565b9250506080610cc088828901610bf2565b9150509295509295909350565b6000610cd882610c07565b9150610ce383610c07565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d2257610d216109b2565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5f57610d5e6109b2565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d9c57610d9b6109b2565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dd957610dd86109b2565b5b82820290509291505056fea264697066735822122099d66dff9b861f2864c1eaf2de331a1adf93f546bb9a23bdd0cde97d51371f0e64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063a435605d1161004e578063a435605d146100fa578063b60d428814610137578063dc0d3dff14610141578063dc992aa01461017e57610083565b80633ccfd60b1461008d578063741bef1a146100a45780638da5cb5b146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b005b3480156100b057600080fd5b506100b9610514565b6040516100c691906107c4565b60405180910390f35b3480156100db57600080fd5b506100e461053a565b6040516100f19190610800565b60405180910390f35b34801561010657600080fd5b50610121600480360381019061011c919061084c565b61055e565b60405161012e9190610892565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610168600480360381019061016391906108d9565b610576565b6040516101759190610800565b60405180910390f35b34801561018a57600080fd5b506101936105b5565b6040516101a09190610892565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c290919063ffffffff16565b11610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610963565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610356576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040157600080828154811061037b5761037a610983565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f9906109e1565b915050610359565b50600067ffffffffffffffff81111561041d5761041c610a2a565b5b60405190808252806020026020018201604052801561044b5781602001602082028036833780820191505090505b506000908051906020019061046192919061069e565b506000803373ffffffffffffffffffffffffffffffffffffffff164760405161048990610a8a565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b509150915081610510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050790610aeb565b60405180910390fd5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b6000818154811061058657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6000806105ce836105fe565b90506000670de0b6b3a764000085836105e79190610b0b565b6105f19190610b94565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064757600080fd5b505afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190610c52565b5050509150506402540be400816106969190610ccd565b915050919050565b828054828255906000526020600020908101928215610717579160200282015b828111156107165782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106be565b5b5090506107249190610728565b5090565b5b80821115610741576000816000905550600101610729565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061078a61078561078084610745565b610765565b610745565b9050919050565b600061079c8261076f565b9050919050565b60006107ae82610791565b9050919050565b6107be816107a3565b82525050565b60006020820190506107d960008301846107b5565b92915050565b60006107ea82610745565b9050919050565b6107fa816107df565b82525050565b600060208201905061081560008301846107f1565b92915050565b600080fd5b610829816107df565b811461083457600080fd5b50565b60008135905061084681610820565b92915050565b6000602082840312156108625761086161081b565b5b600061087084828501610837565b91505092915050565b6000819050919050565b61088c81610879565b82525050565b60006020820190506108a76000830184610883565b92915050565b6108b681610879565b81146108c157600080fd5b50565b6000813590506108d3816108ad565b92915050565b6000602082840312156108ef576108ee61081b565b5b60006108fd848285016108c4565b91505092915050565b600082825260208201905092915050565b7f4469646e6f742073656e6420656e6f7567680000000000000000000000000000600082015250565b600061094d601283610906565b915061095882610917565b602082019050919050565b6000602082019050818103600083015261097c81610940565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109ec82610879565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1f57610a1e6109b2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a74600083610a59565b9150610a7f82610a64565b600082019050919050565b6000610a9582610a67565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ad5600b83610906565b9150610ae082610a9f565b602082019050919050565b60006020820190508181036000830152610b0481610ac8565b9050919050565b6000610b1682610879565b9150610b2183610879565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5a57610b596109b2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b9f82610879565b9150610baa83610879565b925082610bba57610bb9610b65565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610be481610bc5565b8114610bef57600080fd5b50565b600081519050610c0181610bdb565b92915050565b6000819050919050565b610c1a81610c07565b8114610c2557600080fd5b50565b600081519050610c3781610c11565b92915050565b600081519050610c4c816108ad565b92915050565b600080600080600060a08688031215610c6e57610c6d61081b565b5b6000610c7c88828901610bf2565b9550506020610c8d88828901610c28565b9450506040610c9e88828901610c3d565b9350506060610caf88828901610c3d565b9250506080610cc088828901610bf2565b9150509295509295909350565b6000610cd882610c07565b9150610ce383610c07565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d2257610d216109b2565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5f57610d5e6109b2565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d9c57610d9b6109b2565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dd957610dd86109b2565b5b82820290509291505056fea264697066735822122099d66dff9b861f2864c1eaf2de331a1adf93f546bb9a23bdd0cde97d51371f0e64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addrToAmt",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}